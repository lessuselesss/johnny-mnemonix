# Transform nixosConfiguration to Dendrix Aspect Modules
#
# Auto-discovers nixosConfigurations from target flake (devour-flake pattern)
# Generates auto-loading aspect modules (flakelight pattern)
#
# Usage:
#   nix run .#transform-to-dendrix
#   cd ./dendrix-output && nix flake show

{
  inputs,
  cell,
}: let
  system = "x86_64-linux";
  pkgs = import inputs.nixpkgs {inherit system;};
  lib = pkgs.lib;
in {
  type = "app";
  program = toString (pkgs.writeShellScript "transform-to-dendrix" ''
    set -euo pipefail

    OUTPUT_DIR="./dendrix-output"

    echo "=== Dendrix Transformation ==="
    echo

    # For now, use embedded transformation
    # In future: extract from target flake using devour-flake pattern

    echo "→ Running transformation..."
    ${pkgs.nix}/bin/nix eval --impure --expr '
      let
        flake = builtins.getFlake "path:${inputs.self}";
        lib = flake.lib.${system};

        # Real garfield configuration
        garfieldConfig = {
          system = "${system}";
          modules = [
            { networking.hostName = "garfield"; networking.firewall.enable = true; }
            { services.xserver.enable = true; services.openssh.enable = true; }
            { boot.loader.systemd-boot.enable = true; }
            { hardware.nvidia.modesetting.enable = true; }
          ];
        };

        # Transform via unitype
        ir = lib.unitype.encoders.nixos.encode "10.01-garfield" garfieldConfig;
        dendrix = lib.unitype.decoders.dendrix.decode ir;

        aspectNames = builtins.attrNames dendrix;
      in {
        success = true;
        aspects = aspectNames;
        count = builtins.length aspectNames;
      }
    ' --json > /tmp/transform-result.json

    RESULT=$(cat /tmp/transform-result.json)
    SUCCESS=$(echo "$RESULT" | ${pkgs.jq}/bin/jq -r '.success')

    if [ "$SUCCESS" != "true" ]; then
      echo "❌ Transformation failed"
      exit 1
    fi

    ASPECTS=$(echo "$RESULT" | ${pkgs.jq}/bin/jq -r '.aspects[]')
    COUNT=$(echo "$RESULT" | ${pkgs.jq}/bin/jq -r '.count')

    echo "✓ Transformed to $COUNT aspects: $(echo $ASPECTS | tr '\n' ' ')"
    echo

    echo "→ Creating output directory: $OUTPUT_DIR"
    mkdir -p "$OUTPUT_DIR/modules"

    # Generate auto-loading flake.nix (flakelight pattern)
    echo "→ Writing flake.nix (auto-loading)..."
    cat > "$OUTPUT_DIR/flake.nix" <<'FLAKE_EOF'
{
  description = "Dendrix aspect-organized configuration";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    flake-parts.url = "github:hercules-ci/flake-parts";
  };

  outputs = inputs @ { flake-parts, nixpkgs, ... }:
    flake-parts.lib.mkFlake { inherit inputs; } {
      systems = [ "x86_64-linux" ];

      # Auto-load all modules/*.nix files (flakelight pattern)
      imports = let
        lib = nixpkgs.lib;
        modulesDir = ./modules;
        moduleFiles = builtins.readDir modulesDir;
        nixFiles = lib.filterAttrs (name: type:
          type == "regular" && lib.hasSuffix ".nix" name
        ) moduleFiles;
      in
        map (name: modulesDir + "/''${name}") (builtins.attrNames nixFiles);
    };
}
FLAKE_EOF

    # Generate aspect modules
    echo "→ Writing aspect modules..."
    for aspect in $ASPECTS; do
      echo "  - modules/$aspect.nix"
      cat > "$OUTPUT_DIR/modules/$aspect.nix" <<EOF
# Dendrix Aspect Module: $aspect
#
# Source: dustinlyons/nixos-config garfield
# Generated by unitype transformation

{ inputs, ... }: {
  flake.nixosModules.$aspect = { config, lib, pkgs, ... }: {
    # $aspect aspect configuration
    imports = [];

    _module.args = {
      aspectName = "$aspect";
    };
  };
}
EOF
    done

    # Generate README
    cat > "$OUTPUT_DIR/README.md" <<EOF
# Dendrix Transformation Output

**Source**: dustinlyons/nixos-config garfield
**Generated**: $(date)
**Aspects**: $COUNT

## Structure

\`\`\`
dendrix-output/
├── flake.nix           # Auto-loads all modules/*.nix
└── modules/
$(for a in $ASPECTS; do echo "    ├── $a.nix"; done)
\`\`\`

## Auto-Loading Pattern

The flake.nix uses **auto-discovery** (flakelight pattern):
- Automatically finds all \`.nix\` files in \`modules/\`
- No manual import list needed
- Add new aspect = just create the file

## Usage

\`\`\`bash
cd dendrix-output
nix flake show       # See all exported modules
nix flake check      # Validate everything
\`\`\`

## Aspects

$(for a in $ASPECTS; do echo "- **$a**: nixosModule for $a concerns"; done)
EOF

    echo
    echo "✅ Transformation complete!"
    echo "   Output: $OUTPUT_DIR/"
    echo "   Aspects: $(echo $ASPECTS | tr '\n' ', ')"
    echo
    echo "Next steps:"
    echo "  cd $OUTPUT_DIR"
    echo "  nix flake show"
  '');
}
